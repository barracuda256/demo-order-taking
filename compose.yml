x-logging: &logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  postgres_keycloak:
    build:
      context: ./docker
      dockerfile: postgres.Dockerfile
    restart: unless-stopped
    container_name: postgres_keycloak
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
#      - ./data:/var/lib/postgresql/data
      - type: tmpfs
        target: /var/lib/postgresql/data
        tmpfs:
          size: 100000000
    expose:
      - 5432
    ports:
      - ${POSTGRES_PORT}:5432
    deploy:
      resources:
        limits:
          memory: 250M
          cpus: '0.25'
    logging: *logging

  keycloak:
    build:
      context: ./docker
      dockerfile: keycloak.Dockerfile
    container_name: keycloak
    command: ['start-dev', "--import-realm"]
    restart: unless-stopped
    environment:
      KC_DB: ${KC_DB}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_DB_URL: ${KC_DB_URL}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - ${KC_PORT}:8080
    volumes:
      - ./keycloak/demo-realm.json:/opt/keycloak/data/import/realm.json:ro
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: '1'
    logging: *logging
    depends_on:
      - postgres_keycloak

  zookeeper:
    build:
      context: ./docker
      dockerfile: zookeeper.Dockerfile
    container_name: zookeeper
    restart: "no"
    ports:
      - ${ZOOKEEPER_PORT}:2181

  kafka:
    build:
      context: ./docker
      dockerfile: kafka.Dockerfile
    container_name: kafka
    restart: "no"
    ports:
      - ${KAFKA_PORT}:9092
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:${KAFKA_PORT}
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:${KAFKA_PORT}
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafdrop:
    build:
      context: ./docker
      dockerfile: kafdrop.Dockerfile
    container_name: kafdrop
    restart: "no"
    ports:
      - ${KAF_DROP_PORT}:9000
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - kafka

  discovery:
    build:
      context: ./eureka-server
      dockerfile: eureka-server.Dockerfile
    container_name: discovery
    restart: "no"
    ports:
      - ${EUREKA_SERVER_PORT}:8761
    deploy:
      resources:
        limits:
          memory: 250M
          cpus: '1'
    logging: *logging

  config_server:
    build:
      context: ./github-config-server
      dockerfile: config-server.Dockerfile
    container_name: config_server
    restart: unless-stopped
    environment:
      - JAVA_OPTS=
        -DEUREKA_SERVER_URL=${EUREKA_SERVER_URL}
    #    hostname: config_server
    ports:
      - ${CONFIG_SERVER_PORT}:8888
    deploy:
      resources:
        limits:
          memory: 250M
          cpus: '1'
    logging: *logging
    depends_on:
      - discovery

  eureka_client:
    build:
      context: ./eureka-client
      dockerfile: eureka-client.Dockerfile
    container_name: eureka_client
    restart: "no"
    environment:
      - JAVA_OPTS=
        -DEUREKA_SERVER_URL=${EUREKA_SERVER_URL}
        -DCONFIG_SERVER_URL=${CONFIG_SERVER_URL}
        -DEUREKA_CLIENT_PORT=${EUREKA_CLIENT_PORT}
    ports:
      - ${EUREKA_CLIENT_PORT}:${EUREKA_CLIENT_PORT}
    deploy:
      resources:
        limits:
          memory: 200M
          cpus: '1'
    logging: *logging
    depends_on:
      - config_server

  api_gateway:
    build:
      context: ./api-gateway
      dockerfile: api-gateway-server.Dockerfile
    container_name: api_gateway
    restart: "no"
    environment:
      - JAVA_OPTS=
        -DEUREKA_SERVER_URL=${EUREKA_SERVER_URL}
    ports:
      - ${API_GATEWAY_SERVER_PORT}:8765
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: '1'
    logging: *logging
    depends_on:
      - eureka_client

